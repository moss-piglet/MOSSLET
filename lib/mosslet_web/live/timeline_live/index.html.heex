<.layout current_page={:timeline} current_user={@current_user} key={@key} type="sidebar">
  <%!-- Main timeline container with improved visual flow --%>
  <div
    class="min-h-screen bg-gradient-to-br from-slate-50/30 via-transparent to-teal-50/20 dark:from-slate-900/30 dark:via-transparent dark:to-teal-900/10"
    phx-hook="ReplyComposer"
    id="timeline-container"
  >
    <%!-- Timeline header with calmer mobile spacing --%>
    <div class="relative px-4 sm:px-6 lg:px-8 pt-6 sm:pt-8 pb-4 sm:pb-6">
      <div class="mx-auto max-w-2xl text-center">
        <MossletWeb.DesignSystem.liquid_timeline_header
          user_name={user_name(@current_user, @key)}
          status="calm"
          status_message="Mindfully connected"
          class="space-y-2 sm:space-y-3"
        />
      </div>
    </div>

    <%!-- Content container with calmer mobile spacing --%>
    <MossletWeb.DesignSystem.liquid_container max_width="lg" class="space-y-4 sm:space-y-6">
      <%!-- Realtime update indicator (sticky at top when new posts arrive) --%>
      <MossletWeb.DesignSystem.liquid_timeline_realtime_indicator
        new_posts_count={Map.get(@unread_counts, String.to_atom(@active_tab || "home"), 0)}
        active_tab={@active_tab || "home"}
      />

      <%!-- Timeline navigation tabs with improved mobile spacing --%>
      <div class="bg-white/60 dark:bg-slate-800/60 backdrop-blur-md rounded-2xl border border-slate-200/40 dark:border-slate-700/40 shadow-lg shadow-slate-900/5 dark:shadow-slate-900/20 p-3 sm:p-2">
        <div class="flex items-center justify-between sm:justify-center gap-2 sm:gap-4 lg:gap-6">
          <MossletWeb.DesignSystem.liquid_timeline_tabs
            tabs={[
              %{
                key: "home",
                label: "Home",
                count: @timeline_counts.home || 12,
                unread: @unread_counts.home || 0
              },
              %{
                key: "connections",
                label: "Connections",
                count: @timeline_counts.connections || 4,
                unread: @unread_counts.connections || 0
              },
              %{
                key: "groups",
                label: "Groups",
                count: @timeline_counts.groups || 2,
                unread: @unread_counts.groups || 0
              },
              %{
                key: "bookmarks",
                label: "Bookmarks",
                count: @timeline_counts.bookmarks || 8,
                unread: @unread_counts.bookmarks || 0
              },
              %{
                key: "discover",
                label: "Discover",
                count: @timeline_counts.discover || 0,
                unread: @unread_counts.discover || 0
              }
            ]}
            active_tab={@active_tab || "home"}
          />

          <%!-- Content Filter Toggle --%>
          <button
            id={
              if @show_content_filter,
                do: "close-content-filter-button-timeline",
                else: "open-content-filter-button-timeline"
            }
            type="button"
            class={[
              "p-2.5 rounded-xl transition-all duration-200 ease-out group relative",
              if(@show_content_filter,
                do: "bg-teal-100 dark:bg-teal-900/30 text-teal-700 dark:text-teal-300",
                else:
                  "text-slate-500 dark:text-slate-400 hover:text-teal-600 dark:hover:text-teal-400 hover:bg-teal-50/50 dark:hover:bg-teal-900/20"
              )
            ]}
            phx-hook="TippyHook"
            data-tippy-content={
              if @show_content_filter,
                do: "Close content filter controls",
                else: "Open content filter controls"
            }
            phx-click="toggle_content_filter"
            title="Content Filters"
          >
            <.phx_icon
              name="hero-funnel"
              class="h-5 w-5 transition-transform duration-200 group-hover:scale-110"
            />

            <%!-- Enhanced filter indicator badge --%>
            <div
              :if={has_active_filters?(@content_filters)}
              class={[
                "absolute -top-1.5 -right-1.5 h-4 w-4 rounded-full flex items-center justify-center",
                "bg-gradient-to-br from-emerald-500 to-teal-600",
                "border-2 border-white dark:border-slate-800",
                "shadow-lg shadow-emerald-500/30",
                "animate-pulse",
                "z-10"
              ]}
            >
              <div class="h-1.5 w-1.5 bg-white rounded-full opacity-90"></div>
            </div>
          </button>
        </div>
      </div>

      <%!-- Content Filtering Panel with improved spacing --%>
      <div :if={@show_content_filter} class="mb-8">
        <div class="animate-in slide-in-from-top-2 duration-300 ease-out">
          <MossletWeb.TimelineContentFilter.liquid_content_filter
            filters={@content_filters}
            class=""
          />
        </div>
      </div>

      <%!-- Enhanced compose with better visual prominence --%>
      <div class="relative">
        <%!-- Subtle glow effect for composer --%>
        <div class="absolute inset-0 bg-gradient-to-r from-emerald-500/10 via-teal-500/5 to-emerald-500/10 rounded-2xl blur-xl">
        </div>
        <%!-- Real functional composer connected to backend --%>
        <.form
          for={@post_form}
          id="timeline-composer"
          phx-submit="save_post"
          phx-change="validate_post"
          phx-drop-target={@uploads.photos.ref}
          class="relative"
        >
          <MossletWeb.DesignSystem.liquid_timeline_composer_enhanced
            user_name={user_name(@current_user, @key) || "Private Author"}
            user_avatar={
              if show_avatar?(@current_user),
                do: maybe_get_user_avatar(@current_user, @key) || "/images/logo.svg",
                else: "/images/logo.svg"
            }
            placeholder="Share something meaningful with your community..."
            character_limit={500}
            selector={@selector}
            form={@post_form}
            uploads={@uploads}
            class="relative"
            content_warning_enabled?={@content_warning_enabled?}
          />
        </.form>
      </div>

      <%!-- Timeline feed with calmer spacing and visual flow --%>
      <div class="space-y-4 sm:space-y-5">
        <%!-- Real timeline posts from encrypted backend --%>
        <div id="timeline-posts" phx-update="stream" class="space-y-4 sm:space-y-5">
          <div :for={{dom_id, post} <- @streams.posts} id={dom_id} class="timeline-post-container">
            <div id={"timeline-card-container-#{post.id}"} class="timeline-post-item new-post">
              <MossletWeb.DesignSystem.liquid_timeline_post
                user_name={get_post_author_name(post, @current_user, @key)}
                user_handle={"@" <> (case decr_item(post.username, @current_user, get_post_key(post, @current_user), @key, post, "username") do
                  result when is_binary(result) -> result
                  _ -> "author"
                end)}
                user_avatar={get_post_author_avatar(post, @current_user, @key)}
                timestamp={format_post_timestamp(post.inserted_at)}
                verified={false}
                content_warning?={post.content_warning?}
                content_warning={
                  if post.content_warning? do
                    case post.visibility do
                      :public ->
                        decr_item(
                          post.content_warning,
                          @current_user,
                          get_post_key(post),
                          @key,
                          post,
                          "body"
                        ) || "[Could not decrypt content]"

                      _ ->
                        decr_item(
                          post.content_warning,
                          @current_user,
                          get_post_key(post, @current_user),
                          @key,
                          post,
                          "body"
                        ) || "[Could not decrypt content]"
                    end
                  end
                }
                content_warning_category={
                  if post.content_warning? do
                    case post.visibility do
                      :public ->
                        decr_item(
                          post.content_warning_category,
                          @current_user,
                          get_post_key(post),
                          @key,
                          post,
                          "body"
                        ) || "[Could not decrypt content]"

                      _ ->
                        decr_item(
                          post.content_warning_category,
                          @current_user,
                          get_post_key(post, @current_user),
                          @key,
                          post,
                          "body"
                        ) || "[Could not decrypt content]"
                    end
                  end
                }
                content={
                  case post.visibility do
                    :public ->
                      decr_item(
                        post.body,
                        @current_user,
                        get_post_key(post),
                        @key,
                        post,
                        "body"
                      ) || "[Could not decrypt content]"

                    _ ->
                      decr_item(
                        post.body,
                        @current_user,
                        get_post_key(post, @current_user),
                        @key,
                        post,
                        "body"
                      ) || "[Could not decrypt content]"
                  end
                }
                images={get_decrypted_post_images(post, @current_user, @key)}
                stats={
                  %{
                    replies:
                      cond do
                        is_list(post.replies) -> length(post.replies)
                        Ecto.assoc_loaded?(post.replies) -> length(post.replies)
                        true -> 0
                      end,
                    shares: post.reposts_count || 0,
                    likes: post.favs_count || 0
                  }
                }
                post_id={post.id}
                current_user_id={@current_user.id}
                post={post}
                current_user={@current_user}
                key={@key}
                is_repost={post.repost || false}
                liked={get_post_liked_status(post, @current_user, @key)}
                bookmarked={get_post_bookmarked_status(post, @current_user)}
                can_repost={can_repost_with_decryption?(post, @current_user, @key)}
                unread?={get_post_unread_status(post, @current_user)}
                class="shadow-lg shadow-slate-900/6 dark:shadow-slate-900/20 hover:shadow-xl hover:shadow-slate-900/10 dark:hover:shadow-slate-900/30 transition-shadow duration-300"
              />
            </div>
          </div>
        </div>

        <%!-- Show gentle message when no posts available --%>
        <div class="hidden only:block text-center py-8 sm:py-12">
          <div class="inline-flex flex-col items-center gap-3 sm:gap-4 px-6 sm:px-8 py-5 sm:py-6 rounded-2xl bg-gradient-to-br from-emerald-50/40 via-teal-50/30 to-cyan-50/40 dark:from-emerald-900/10 dark:via-teal-900/5 dark:to-cyan-900/10 border border-emerald-200/40 dark:border-emerald-700/30">
            <.phx_icon name="hero-sparkles" class="h-7 sm:h-8 w-7 sm:w-8 text-emerald-500" />
            <div class="text-center">
              <p class="text-sm font-medium text-emerald-700 dark:text-emerald-300 mb-1">
                Your timeline awaits
              </p>
              <p class="text-xs text-slate-600 dark:text-slate-400 max-w-xs leading-relaxed">
                Share something meaningful or connect with others to see their posts here.
              </p>
            </div>
          </div>
        </div>

        <%!-- Enhanced load more button with dynamic remaining count and tab colors --%>
        <MossletWeb.DesignSystem.liquid_timeline_scroll_indicator
          remaining_count={
            calculate_remaining_posts(@timeline_counts, @active_tab, @loaded_posts_count)
          }
          load_count={@options.post_per_page}
          loading={@load_more_loading}
          tab_color={get_tab_color(@active_tab)}
          phx-click="load_more_posts"
        />
      </div>

      <%!-- Gentle end of feed message with enhanced calm messaging --%>
      <div class="text-center py-12">
        <div class="inline-flex flex-col items-center gap-4 px-8 py-6 rounded-2xl bg-gradient-to-br from-emerald-50/40 via-teal-50/30 to-cyan-50/40 dark:from-emerald-900/10 dark:via-teal-900/5 dark:to-cyan-900/10 border border-emerald-200/40 dark:border-emerald-700/30">
          <.phx_icon name="hero-heart" class="h-8 w-8 text-emerald-500" />
          <div class="text-center">
            <p class="text-sm font-medium text-emerald-700 dark:text-emerald-300 mb-1">
              You're all caught up!
            </p>
            <p class="text-xs text-slate-600 dark:text-slate-400 max-w-xs">
              Time to step away and enjoy the real world. Your community will be here when you return.
            </p>
          </div>
        </div>
      </div>
    </MossletWeb.DesignSystem.liquid_container>

    <%!-- Moderation modals - Using LiveComponents now --%>
    <.live_component
      :if={@show_report_modal}
      module={MossletWeb.TimelineLive.ReportModalComponent}
      id={"report-modal-component-#{@report_post_id}"}
      show={@show_report_modal}
      post_id={@report_post_id}
      reported_user_id={@report_user_id}
    />

    <.live_component
      :if={@show_block_modal}
      module={MossletWeb.TimelineLive.BlockModalComponent}
      id={"block-modal-component-#{@block_user_id}-#{@block_post_id}"}
      post_id={@block_post_id}
      show={@show_block_modal}
      user_id={@block_user_id}
      user_name={@block_user_name}
    />
  </div>
</.layout>
